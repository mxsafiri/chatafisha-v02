rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isSubmitter() {
      return hasRole('submitter');
    }
    
    function isVerifier() {
      return hasRole('verifier');
    }
    
    function isFunder() {
      return hasRole('funder');
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isProjectOwner(projectId) {
      return isSignedIn() && 
             get(/databases/$(database)/documents/projects/$(projectId)).data.submitterId == request.auth.uid;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Role-specific profile collections
    match /submitterProfiles/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    match /verifierProfiles/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    match /funderProfiles/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if true; // Public read access
      allow create: if isSignedIn() && (isSubmitter() || isAdmin());
      allow update: if isSignedIn() && (
        resource.data.submitterId == request.auth.uid || 
        isVerifier() || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Verifications collection
    match /verifications/{verificationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (isSubmitter() || isAdmin());
      allow update: if isSignedIn() && (isVerifier() || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Funding collection
    match /funding/{fundingId} {
      allow read: if true; // Public read access
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}